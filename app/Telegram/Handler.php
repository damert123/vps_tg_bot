<?php

namespace App\Telegram;

use App\Models\Server;
use DefStudio\Telegraph\Facades\Telegraph;
use DefStudio\Telegraph\Handlers\WebhookHandler;
use DefStudio\Telegraph\Keyboard\Button;
use DefStudio\Telegraph\Keyboard\Keyboard;
use DefStudio\Telegraph\Models\TelegraphChat;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Stringable;

class Handler extends WebhookHandler
{

    private ?SystemStats $systemStats = null;

    private bool $isConnected = false; // —Ñ–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è



    /**
     * @throws \Exception
     */
    public function __construct() {

        try {
            $server = Server::first();
            if (!$server){
                throw new \Exception("–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.");
            }
            $this->systemStats = new SystemStats($server->hostname, $server->username, getenv('HOME') . '/.ssh/id_rsa');
            $this->isConnected = true;

        }catch (\Exception $e){
            $this->isConnected = false;
            Log::error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É: " . $e->getMessage());
        }


    }
    public function hello(): void
    {
        $this->reply('–ü—Ä–∏–≤–µ—Ç —ç—Ç–æ –ø–µ—Ä–≤—ã–π –±–æ—Ç –Ω–∞ laravel ');
    }

    public function help(): void
    {
        $this->reply('*–ü—Ä–∏–≤–µ—Ç!*');
    }




    public function server_list(): void
    {
        if (!$this->isConnected){
            $this->reply("–û—à–∏–±–∫–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ VPS —Å–µ—Ä–≤–µ—Ä—É.");
            return;
        }



        Telegraph::chat($this->chat)->message('–í—ã–±–µ—Ä–∏ –∫–∞–∫–æ–µ-—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ')->keyboard(
            Keyboard::make()->buttons([
                Button::make('–ù–∞–≥—Ä—É–∑–∫–∞ CPU')->action('cpuUsage'),
                Button::make('–ù–∞–≥—Ä—É–∑–∫–∞ RAM')->action('ramUsage'),
                Button::make('–ú–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ!!')->action('hddUsage'),
                Button::make('üíª VPS —Å–µ—Ä–≤–µ—Ä ' . Server::pluck('hostname')->first())->action('serverStat'),
//                Button::make('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è')
//                    ->action('subscribe')
//                    ->param('channel_name', '@fsdfsd'),
            ])
        )->send();
    }

    public function serverStat()
    {
        if (!$this->isConnected) {
            $this->reply("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ VPS —Å–µ—Ä–≤–µ—Ä—É.");
            return;
        }

        $server = Server::first();

        if (!$server){
            $this->reply('–û—à–∏–±–∫–∞: —Å–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        $serverStats = $server->monitorings; // –ß–µ—Ä–µ–∑ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ Server

        if (!$serverStats){
            $this->reply("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞.");
        }

        $message = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: \n";
        $message .= " ‚öôÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU: {$serverStats->last_cpu_usage}%\n";
        $message .= " üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM: {$serverStats->last_ram_usage}%\n";
        $message .= " üíø –ú–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: {$serverStats->last_hdd_usage}\n";
        $message .= " üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {$serverStats->last_update}";

        Telegraph::chat($this->chat)->message($message)->send();




    }

    public function cpuUsage(): void
    {
        if (!$this->isConnected){
            $this->reply("–û—à–∏–±–∫–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ VPS —Å–µ—Ä–≤–µ—Ä—É.");
            return;
        }

        $cpuData = $this->systemStats->getCpuUsage();  // –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
//        $this->reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU: $cpuData%");
        Telegraph::chat($this->chat)->message("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU: $cpuData%")->send();
    }









    public function ramUsage(): void
    {
        if (!$this->isConnected){
            $this->reply("–û—à–∏–±–∫–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ VPS —Å–µ—Ä–≤–µ—Ä—É.");
            return;
        }

        $ramData = $this->systemStats->getRamUsage();  // –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö RAM
//        $this->reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM: $ramData%");
        Telegraph::chat($this->chat)->message("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM: $ramData%")->send();

    }

    public function hddUsage(): void
    {
        if (!$this->isConnected){
            $this->reply("–û—à–∏–±–∫–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ VPS —Å–µ—Ä–≤–µ—Ä—É.");
            return;
        }

        $hddData = $this->systemStats->getHddUsage();  // –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö HDD
        $this->reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞: $hddData");
        Telegraph::chat($this->chat)->message($hddData)->send();

    }


    public function subscribe(): void
    {
        $this->reply("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {$this->data->get('channel_name')}");
    }

    public function like()
    {
        Telegraph::message('–°–ø–∞—Å–∏–±–æ –∑–∞ –ª–∞–π–∫')->send();

    }

    protected function handleUnknownCommand(Stringable $text): void
    {
        if ($text->value() === '/start'){
            $this->reply('–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–º—É VPS —Å–µ—Ä–≤–µ—Ä—É');
        }else{
            $this->reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
        }
    }



}
