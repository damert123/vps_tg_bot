<?php

namespace App\Telegram;

use App\Models\ChatStatus;
use App\Models\Server;
use DefStudio\Telegraph\Facades\Telegraph;
use DefStudio\Telegraph\Handlers\WebhookHandler;
use DefStudio\Telegraph\Keyboard\Button;
use DefStudio\Telegraph\Keyboard\Keyboard;
use DefStudio\Telegraph\Models\TelegraphBot;
use DefStudio\Telegraph\Models\TelegraphChat;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Stringable;
use phpseclib3\Crypt\PublicKeyLoader;
use phpseclib3\Net\SSH2;

class Handler extends WebhookHandler
{

    private ?SystemStats $systemStats = null;

//    private bool $isConnected = false; // —Ñ–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è



    /**
     * @throws \Exception
     */
    public function __construct() {

        try {
            $server = Server::first();
            if (!$server){
                throw new \Exception("–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.");
            }
            $this->systemStats = new SystemStats($server->hostname, $server->username, getenv('HOME') . '/.ssh/id_rsa');


        }catch (\Exception $e){
            Log::error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É: " . $e->getMessage());
        }


    }



    public function server_add(): void
    {
        Telegraph::chat($this->chat)->message("–î–æ–±–∞–≤—å—Ç–µ –Ω–∞—à –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –Ω–∞ –≤–∞—à —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–∞–π–ª `~/.ssh/authorized_keys`\n–ö–ª—é—á: ssh-rsa....")->keyboard(
            Keyboard::make()->buttons([
                Button::make('‚úÖ –Ø –¥–æ–±–∞–≤–∏–ª')->action('serverAddName'),
            ]))->send();

    }

    public function cancelServerAdd()
    {
        $this->deleteChatStatus();
        Telegraph::chat($this->chat)->message('–î–æ–±–∞–≤–ª–µ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ')->send();
        $this->reply('');
    }


    public function serverAddName()
    {
        $this->updateUserStatus('adding_name');
        Telegraph::chat($this->chat)->message('–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞')->keyboard(
            Keyboard::make()->buttons([
                Button::make('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞')->action('cancelServerAdd'),
            ])
        )->send();
        $this->reply('');

    }

    public function serverStore()
    {
        $this->updateUserStatus('awaiting_credentials');
        Telegraph::chat($this->chat)->message('–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ username@hostname')->keyboard(
            Keyboard::make()->buttons([
                Button::make('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞')->action('cancelServerAdd'),
            ])
        )->send();
        $this->reply('');

    }

    protected function updateUserStatus($status): void
    {
        ChatStatus::updateOrCreate(
            ['chat_id' => $this->chat->id],
            ['status' => $status]
        );
    }
    protected function deleteChatStatus(): void
    {
        $chatStatus = ChatStatus::where('chat_id', $this->chat->id)->first();
        $chatStatus->delete();
    }

    protected function getUserStatus(): ?string
    {
        $status = ChatStatus::where('chat_id', $this->chat->id)->first();
        return $status ? $status->status : null;
    }


    protected function handleChatMessage(Stringable $text): void
    {
        $statusChat = $this->getUserStatus();
        if ($statusChat === 'adding_name'){
            ChatStatus::updateOrCreate(
                ['chat_id' => $this->chat->id],
                ['status' => 'awaiting_credentials', 'server_name' => $text]
            );
            $this->serverStore();
        }

        if ($statusChat !== 'awaiting_credentials'){
            return;
        }
        if (preg_match('/^[\w-]+@[\w.-]+$/', $text)) {
            // –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ username –∏ hostname
            [$username, $hostname] = explode('@', $text);

            $chatStatus = ChatStatus::where('chat_id', $this->chat->id)->first();
            $serverName = $chatStatus->server_name;

            if ($this->testSSHConnection($username, $hostname)) {
                $this->storeServerCredentials($username, $hostname, $serverName);  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                Telegraph::chat($this->chat)->message('‚úÖ *–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!*')->send();
                $this->deleteChatStatus();
            } else {
                Telegraph::chat($this->chat)->message('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')->keyboard(
                    Keyboard::make()->buttons([
                        Button::make('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞')->action('cancelServerAdd'),
                    ])
                )->send();
            }
        } else {
            Telegraph::chat($this->chat)->message('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ username@hostname')->keyboard(
                Keyboard::make()->buttons([
                    Button::make('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞')->action('cancelServerAdd'),
                ])
            )->send();
        }

    }

    protected function testSSHConnection($username, $hostname)
    {
        try {
            // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä SSH2 –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á
            $ssh = new SSH2($hostname);
            $privateKeyPath = getenv('HOME') . '/.ssh/id_rsa';
            $key = PublicKeyLoader::load(file_get_contents($privateKeyPath));

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if (!$ssh->login($username, $key)) {
                throw new \Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É {$hostname} —á–µ—Ä–µ–∑ SSH");
            }
            return true;  // –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        } catch (\Exception $e) {
            Log::error("–û—à–∏–±–∫–∞ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: " . $e->getMessage());
            return false;  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
        }
    }

    protected function storeServerCredentials($username, $hostname, $serverName)
    {
        $privateKeyPath = getenv('HOME') . '/.ssh/id_rsa'; // –ü—É—Ç—å –∫ –≤–∞—à–µ–º—É –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –∫–ª—é—á—É
        $publicKeyPath = $privateKeyPath . '.pub';

        Server::create([
            'username' => $username,
            'ssh_key' => $publicKeyPath,
            'server_name' => $serverName,
            'hostname' => $hostname,
        ]);
    }


    public function server_list(): void
    {
//        if (!$this->isConnected){
//            $this->reply("–û—à–∏–±–∫–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ VPS —Å–µ—Ä–≤–µ—Ä—É.");
//            return;
//        }
        $servers = Server::all();

        if ($servers->isEmpty()) {
            $this->reply("*–°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ –ø—É—Å—Ç!*\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π\n`/server_add`");
            return;
        }

        $buttons = [];

        foreach ($servers as $server){
            $buttons[] = Button::make('üíª VPS ' . $server->server_name . ' ' . $server->hostname )
                ->action('serverStat')->param('hostname', $server->hostname);
        }


        Telegraph::chat($this->chat)->message('–í—ã–±–µ—Ä–∏ –∫–∞–∫–æ–µ-—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ')->keyboard(
            Keyboard::make()->buttons($buttons)
        )->send();


//        Telegraph::chat($this->chat)->message('–í—ã–±–µ—Ä–∏ –∫–∞–∫–æ–µ-—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ')->keyboard(
//            Keyboard::make()->buttons([
//                Button::make('üíª VPS —Å–µ—Ä–≤–µ—Ä ' . Server::pluck('hostname')->first())->action('serverStat'),
//            ])
//        )->send();
    }


    public function server_monitoring()
    {
//        if (!$this->isConnected) {
//            $this->reply("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ VPS —Å–µ—Ä–≤–µ—Ä—É.");
//            return;
//        }

        $servers = Server::all();

        if ($servers->isEmpty()) {
            $this->reply("*–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ —Å–µ—Ä–≤–µ—Ä!*\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π\n`/server_add`");
            return;
        }

        $message = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤:\n\n";

        foreach ($servers as $server){
            $serverStats = $server->monitorings()->latest()->first();

            if (!$serverStats){
                $message .= "–°–µ—Ä–≤–µ—Ä {$server->hostname}: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É\n\n";
                continue;
            }

            if ($server->monitorings->ssh_connection == 'error'){
                $message .= "‚ö†Ô∏è –û—à–∏–±–∫–∞: VPS *{$server->server_name}*: {$server->monitorings->error_message}\n\n ";
            }else{
                $message .= "*{$server->server_name}* {$server->hostname} \n";
                $message .= " ‚öôÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU: {$serverStats->last_cpu_usage}%\n";
                $message .= " üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM: {$serverStats->last_ram_usage}%\n";
                $message .= " üíø –ú–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: {$serverStats->last_hdd_usage}\n";
                $message .= " üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {$serverStats->last_update}\n\n";
            }



        }

        Telegraph::chat($this->chat)->message($message)->send();
        $this->reply('');

    }

    public function serverStat($hostname)
    {
//        if (!$this->isConnected) {
//            $this->reply("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ VPS —Å–µ—Ä–≤–µ—Ä—É.");
//            return;
//        }

        $server = Server::where('hostname', $hostname)->first();

        if (!$server){
            $this->reply('‚ö†Ô∏è –û—à–∏–±–∫–∞: —Å–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }


        $serverStats = $server->monitorings; // –ß–µ—Ä–µ–∑ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ Server

        if (!$serverStats){
            Telegraph::chat($this->chat)->message("–°–µ—Ä–≤–µ—Ä {$server->hostname}: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É")->send();
            $this->reply('');
            return;

        }


        if ($server->monitorings->ssh_connection == 'error'){
            $message = "‚ö†Ô∏è –û—à–∏–±–∫–∞: VPS *{$server->server_name}*: {$server->monitorings->error_message}\n\n ";
        }else{
            $message = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: \n";
            $message .= " ‚öôÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU: {$serverStats->last_cpu_usage}%\n";
            $message .= " üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM: {$serverStats->last_ram_usage}%\n";
            $message .= " üíø –ú–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: {$serverStats->last_hdd_usage}\n";
            $message .= " üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {$serverStats->last_update}";
        }

        Telegraph::chat($this->chat)->message($message)->send();
        $this->reply('');


    }


    protected function handleUnknownCommand(Stringable $text): void
    {
        if ($text->value() === '/start'){
            $this->reply('–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–º—É VPS —Å–µ—Ä–≤–µ—Ä—É');
        }else{
            $this->reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
        }
    }



}
